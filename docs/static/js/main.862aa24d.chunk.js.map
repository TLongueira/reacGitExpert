{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OACRC,MAAOT,EACPU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCJlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC/B,OACI,sBAAKC,UAAU,4BAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZN,EADY,iDACkCO,UAAUF,GAD5C,+DAEDG,MAAMR,GAFL,cAEZS,EAFY,gBAGCA,EAAKC,OAHN,uBAGXC,EAHW,EAGXA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAChB,MAAO,CACHC,GAAGD,EAAIC,GACPhB,MAAMe,EAAIf,MACVC,IAAIc,EAAIE,OAAOC,iBAAiBjB,QATtB,kBAYXY,GAZW,4CAAF,sDCCPM,EAAU,SAAC,GAAmB,IAAjBb,EAAgB,EAAhBA,UAEtB,ECFwB,SAACA,GACzB,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNlB,EAAQC,GAAWkB,MAAK,SAAAC,GACpBH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAGjB,CAACd,IAEGe,EDb0BK,CAAapB,GAAjCW,EAAb,EAAQL,KAAaQ,EAArB,EAAqBA,QACrB,OACI,qCACI,6BAAKd,IACJc,GAAW,WACZ,qBAAKlB,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEVxBW,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIJ,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWd,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEAA,UAAWA,GADNA,Y,MCfrBuB,IAASC,OAEL,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.862aa24d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategorias }) => {\n    const [inputValue, setinputValue] = useState('');\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategorias(cats => [inputValue, ...cats]);\n            setinputValue('');\n\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            ></input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className=\"card animate__fadeInRight\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs= async(categoria) =>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=xHFZYo0fpezktSTY2QBEC6cQ21pmVc7n`\n    const resp=await fetch(url);\n    const {data}=await resp.json();\n\n    const gifs=data.map(img=>{\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nexport const GifGrid = ({ categoria }) => {\n\n    const { data:images, loading } = useFetchGifs(categoria);\n    return (\n        <>\n            <h3>{categoria}</h3>\n            {loading && \"Cargando\"}\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    )\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (categoria) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(categoria).then(imgs=>{\n            setState({\n                data:imgs,\n                loading:false,\n            });\n        })\n    }, [categoria]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categorias, setCategorias] = useState([\"One Punch\"]);\n\n\n\nreturn(\n    <>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategorias={setCategorias}/>\n    <hr></hr>\n    \n    <ol>\n        {\n            categorias.map((categoria)=>(\n                <GifGrid\n                key={categoria}\n                categoria={categoria}\n                />\n            ))\n        }\n    </ol>\n    </>\n);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css'\n\nReactDOM.render( \n    \n    <GifExpertApp />,\n\n    document.getElementById('root')\n);\n\n//crear componente GifExpertApp (h2 \"gif expert app\" + hr)"],"sourceRoot":""}